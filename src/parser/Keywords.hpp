#ifndef Keywords_hpp
#define Keywords_hpp

#define SYMBOLIC(TOKEN, VALUE) inline const char *TOKEN = reinterpret_cast<const char *>(u8##VALUE)

SYMBOLIC(AND, "and");
SYMBOLIC(CASE, "case");
SYMBOLIC(CLASS, "class");
SYMBOLIC(ELSE, "else");
SYMBOLIC(ENDCASE, "endcase");
SYMBOLIC(ENDCLASS, "endclass");
SYMBOLIC(ENDFN, "endfn");
SYMBOLIC(ENDIF, "endif");
SYMBOLIC(ENDWHILE, "endwhile");
SYMBOLIC(FALSE, "false");
SYMBOLIC(FN, "fn");
SYMBOLIC(IF, "if");
SYMBOLIC(LET, "let");
SYMBOLIC(NIL, "nil");
SYMBOLIC(NOT, "not");
SYMBOLIC(OR, "or");
SYMBOLIC(PRINT, "print");
SYMBOLIC(REM, "rem");
SYMBOLIC(REPEAT, "repeat");
SYMBOLIC(RETURN, "return");
SYMBOLIC(TRUE, "true");
SYMBOLIC(UNTIL, "until");
SYMBOLIC(WHEN, "when");
SYMBOLIC(WHILE, "while");

SYMBOLIC(PLUS, "+");
SYMBOLIC(MINUS, "-");
SYMBOLIC(TIMES, "*");
SYMBOLIC(DIVIDE, "/");
SYMBOLIC(MODULO, "%");
SYMBOLIC(FLOOR_DIVIDE, "//");
SYMBOLIC(EXPONENT, "**");

SYMBOLIC(EQUAL, "=");
SYMBOLIC(NOT_EQUAL, "/=");
SYMBOLIC(LESS, "<");
SYMBOLIC(LESS_EQUAL, "<=");
SYMBOLIC(GREATER_EQUAL, ">=");
SYMBOLIC(GREATER, ">");

SYMBOLIC(BITWISE_AND, "&");
SYMBOLIC(BITWISE_OR, "|");
SYMBOLIC(BITWISE_XOR, "^");
SYMBOLIC(BITWISE_COMPL, "~");

SYMBOLIC(COMMA, ",");
SYMBOLIC(DOT, ".");
SYMBOLIC(SEMICOLON, ";");
SYMBOLIC(COLON, ":");
SYMBOLIC(LEFT_PAREN, "(");
SYMBOLIC(RIGHT_PAREN, ")");
SYMBOLIC(FROM, "<-");
SYMBOLIC(TO, "->");
SYMBOLIC(IMAGINARY, "j");
SYMBOLIC(HEX_PREFIX, "0x");
SYMBOLIC(OCT_PREFIX, "0");
SYMBOLIC(BIN_PREFIX, "0b");

#endif
